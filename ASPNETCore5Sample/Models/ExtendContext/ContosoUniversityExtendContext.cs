// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace ASPNETCore5Sample.Models
{
    public partial class ContosoUniversityContext : DbContext
    {
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder) 
        {
            base.OnModelCreating(modelBuilder);

            // ref: https://docs.microsoft.com/zh-tw/ef/core/querying/filters
            foreach (var entityType in modelBuilder.Model.GetEntityTypes())
            {
                var isDeletedProp = entityType.FindProperty("IsDeleted");                
                if (isDeletedProp != null && isDeletedProp.ClrType == typeof(bool))
                {
                    GetType()
                    .GetMethod(nameof(AddIsDeletedFilter))
                    .MakeGenericMethod(entityType.ClrType)
                    .Invoke(this, new object[] { modelBuilder });
                }
            }
        }

        #region Filters

        public void AddIsDeletedFilter<T>(ModelBuilder mb) where T : class
        {
            mb.Entity<T>().HasQueryFilter(x => EF.Property<bool>(x, "IsDeleted") == false);
        }

        #endregion

        public override int SaveChanges()
        {
            BeforeSaveHandler();
            return base.SaveChanges();
        }

        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            BeforeSaveHandler();
            return await base.SaveChangesAsync();
        }

        /// <summary>
        /// 資料前處理
        /// </summary>
        private void BeforeSaveHandler()
        {
            var now = DateTime.Now;
            var entries = ChangeTracker
                .Entries()
                .Where(e => e.State == EntityState.Modified || e.State == EntityState.Deleted);

            foreach (var entityEntry in entries)
            {
                // 更新該筆資料異動時間
                entityEntry.CurrentValues.SetValues(new { DateModified = now });

                // 有IsDeleted欄位註記為刪除狀態，反之則刪除資料
                if (entityEntry.State == EntityState.Deleted && entityEntry.Entity.GetType().GetProperty("IsDeleted") != null)
                {
                    entityEntry.CurrentValues.SetValues(new { IsDeleted = true });
                    entityEntry.State = EntityState.Modified;
                }
            }

        }
    }
}